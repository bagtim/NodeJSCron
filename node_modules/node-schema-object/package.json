{
  "name": "node-schema-object",
  "version": "0.9.2",
  "description": "Node object with validated, transformed & typecasted schema.",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha --harmony"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:scotthovestadt/node-schema-object.git"
  },
  "keywords": [
    "schema"
  ],
  "dependencies": {
    "underscore": "1.4.x",
    "harmony-reflect": "0.0.11"
  },
  "devDependencies": {
    "should": "3.0.1",
    "mocha": "1.17.0"
  },
  "author": {
    "name": "Scott Hovestadt"
  },
  "license": "BSD",
  "readmeFilename": "README.md",
  "engines": {
    "node": ">=0.8"
  },
  "readme": "node-schema-object [![Build Status](https://travis-ci.org/scotthovestadt/node-schema-object.png?branch=master)](https://travis-ci.org/scotthovestadt/node-schema-object)\n==================\n\nDesigned to enforce schema on Javascript objects. Allows you to specify type, transformation and validation of values via a set of attributes. Support for sub-schemas included.\n\n```\nnpm install node-schema-object\n```\n\n**For all features, run node with --harmony flag.**\n\n#Very basic usage example\n```js\nvar SchemaObject = require('node-schema-object');\n\n// Create User schema\nvar User = new SchemaObject({\n  firstName: String,\n  lastName: String,\n  birthDate: Date\n});\n\n// Initialize instance of user\nvar user = new User({firstName: 'Scott', lastName: 'Hovestadt', birthDate: 'June 21, 1988'});\nconsole.log(user.toObject());\n\n// Prints:\n{ firstName: 'Scott',\n  lastName: 'Hovestadt',\n  birthDate: Tue Jun 21 1988 00:00:00 GMT-0700 (PDT) }\n```\n\n#Advanced example\n```js\nvar SchemaObject = require('node-schema-object');\n\n// Create custom basic type\n// Type can be extended with more properties when defined\nvar NotEmptyString = {type: String, minLength: 1};\n\n// Create sub-schema for user's Company\nvar Company = new SchemaObject({\n  startDate: Date,\n  endDate: Date,\n  name: NotEmptyString\n});\n\n// Create User schema\nvar User = new SchemaObject({\n  // Basic user information using custom type\n  firstName: NotEmptyString,\n  lastName: NotEmptyString,\n  \n  // \"NotEmptyString\" with only possible values as 'm' or 'f'\n  gender: {type: NotEmptyString, enum: ['m', 'f']},\n  \n  // Index with sub-schema\n  company: Company,\n  \n  // An array of Objects with an enforced type\n  workHistory: [Company],\n  \n  // Create field which reflects other values but can't be directly modified\n  fullName: {type: String, readOnly: true, default: function() {\n    return (this.firstName + ' ' + this.lastName).trim();\n  }}\n});\n\n// Initialize a new instance of the User with a value\nvar user = new User({firstName: 'Scott', lastName: 'Hovestadt', gender: 'm'});\n\n// Set company name\nuser.company.name = 'My Company';\n\n// The date is automatically typecast from String\nuser.company.startDate = 'June 1, 2010';\n\n// Add company to work history\nuser.workHistory.push({\n  name: 'Old Company',\n  startDate: '01/12/2005',\n  endDate: '01/20/2010'\n});\n\nconsole.log(user.toObject());\n\n// Prints:\n{ firstName: 'Scott',\n  lastName: 'Hovestadt',\n  gender: 'm',\n  company: \n   { startDate: Tue Jun 01 2010 00:00:00 GMT-0700 (PDT),\n     endDate: undefined,\n     name: 'My Company' },\n  workHistory: \n   [ { startDate: Wed Jan 12 2005 00:00:00 GMT-0800 (PST),\n       endDate: Wed Jan 20 2010 00:00:00 GMT-0800 (PST),\n       name: 'Old Company' } ],\n  fullName: 'Scott Hovestadt' }\n```\n\n#Methods\n\n## toObject\n\ntoObject returns a primitive object, stripped of all magic. All values will be typecasted and transformed, but future writes to the primitive object will not. The [invisible attribute](https://github.com/scotthovestadt/node-schema-object#invisible) can be used to ensure an index stored on the SchemaObject will not be written to the primitive object. toObject is automatically called if a SchemaObject is passed to JSON.stringify.\n```js\nvar User = new SchemaObject({\n  firstName: String,\n  lastName: String,\n  birthDate: Date\n});\n\nvar user = new User({firstName: 'Scott', lastName: 'Hovestadt', birthDate: 'June 21, 1988'});\nconsole.log(user.toObject());\n\n// Prints:\n{ firstName: 'Scott',\n  lastName: 'Hovestadt',\n  birthDate: Tue Jun 21 1988 00:00:00 GMT-0700 (PDT) }\n```\n\n## clear\n\nclear removes all values.\n```js\nvar User = new SchemaObject({\n  firstName: String,\n  lastName: String\n});\n\nvar user = new User({firstName: 'Scott', lastName: 'Hovestadt'});\nconsole.log(user.toObject());\n\n// Prints:\n{ firstName: 'Scott',\n  lastName: 'Hovestadt' }\n\nuser.clear();\nconsole.log(user.toObject());\n\n// Prints:\n{ firstName: undefined,\n  lastName: undefined }\n```\n\n## getErrors / clearErrors\n\nSee documentation on [Errors](https://github.com/scotthovestadt/node-schema-object#errors).\n\n\n#Options\n\nWhen you create the SchemaObject, you may pass a set of options as a second argument. These options allow you to fine-tune the behavior of your objects for specific needs.\n\n## toObject(object)\n\ntoObject allows you to transform the response from toObject().\n\nThis example shows how it could be used to ensure transform all strings to uppercase.\n```js\nvar Model = new SchemaObject({\n  string: String\n}, {\n  toObject: function(object) {\n    _.each(object, function(value, key) {\n      if(_.isString(value)) {\n        object[key] = value.toUpperCase();\n      }\n    });\n    return object;\n  }\n});\n\nvar model = new Model();\nmodel.string = 'a string';\nconsole.log(model.string);\n\n// Prints:\n{ 'a string' }\n\nvar simpleObject = model.toObject();\nconsole.log(simpleObject.string);\n\n// Prints:\n{ 'A STRING' }\n```\n\n## strict\n\nstrict (default: true) allows you to specify what happens when an index is set on your SchemaObject that does not exist in the schema. If strict mode is on, the index will be ignored. If strict mode is off, the index will automatically be created in the schema when it's set with type \"any\".\n\nWith strict mode on (default):\n```js\nvar Profile = new SchemaObject({\n  id: String\n}, {\n  strict: true\n});\n\nvar profile = new Profile();\nprofile.id = 'abc123';\nprofile.customField = 'hello';\n\n// Prints:\n{ id: 'abc123' }\n```\n\nWith strict mode off:\n```js\nvar Profile = new SchemaObject({\n  id: String\n}, {\n  strict: false\n});\n\nvar profile = new Profile();\nprofile.id = 'abc123';\nprofile.customField = 'hello';\n\n// Prints:\n{ id: 'abc123', customField: 'hello' }\n```\n\n## dotNotation\n\ndotNotation (default: false) allows you to access deep fields in child objects using dot notation. If dot notation is on, getting or setting \"profile.name\" will look inside the object for a child object \"profile\" and then for key \"name\", instead of simply setting the index \"profile.name\" on the parent object.\n\nThe following example turns off strict mode to demonstrate the differences when toggling dot notation on or off, although dot notation can be used with or without strict mode.\n\nWith dot notation off (default):\n```js\nvar User = new SchemaObject({\n}, {\n  dotNotation: false,\n  strict: false\n});\n\nvar user = new User();\nuser['profile.name'] = 'Scott';\n\n// Prints:\n{ 'profile.name': 'Scott' }\n```\n\nWith dot notation on:\n```js\nvar User = new SchemaObject({\n}, {\n  dotNotation: true,\n  strict: false\n});\n\nvar user = new User();\nuser['profile.name'] = 'Scott';\n\n// Prints:\n{ profile: { name: 'Scott' } }\n```\n\n## onBeforeValueSet(value, key) / onValueSet(value, key)\n\nonBeforeValueSet / onValueSet allow you to bind an event handler to all write operations on an object. Currently, it will only notify of write operations on the object itself and will not notify you when child objects are written to. If you return false or throw an error within the onBeforeValueSet handler, the write operation will be cancelled. Throwing an error will add the error to the error stack.\n```js\nvar User = new SchemaObject({\n  name: String\n}, {\n  onBeforeValueSet: function(value, key) {\n    if(key === 'name' && value === 'Scott') {\n      return false;\n    }\n  }\n});\n\nvar user = new User();\n\nuser.name = 'Scott';\n// Prints:\n{ name: undefined }\n\nuser.name = 'Scott Hovestadt';\n// Prints:\n{ name: 'Scott Hovestadt' }\n```\n\n\n# Errors\n\nWhen setting a value fails, an error is generated silently. Errors can be retrieved with getErrors() and cleared with clearErrors().\n\n```js\nvar Profile = new SchemaObject({\n  id: {type: String, minLength: 5}\n});\n\nvar profile = new Profile();\nprofile.id = '1234';\n\nconsole.log(profile.getErrors());\n\n// Prints:\n[ { errorMessage: 'String length too short to meet minLength requirement.',\n    setValue: '1234',\n    originalValue: undefined,\n    fieldSchema: { name: 'id', type: 'string', minLength: 5 } } ]\n\n// Clear all errors.\nprofile.clearErrors();\n```\n\n\n#Types\n\nSupported types:\n- String\n- Number\n- Boolean\n- Date\n- Array (including types within Array)\n- Object (including typed SchemaObjects for sub-schemas)\n- 'alias'\n- 'any'\n\nWhen a type is specified, it will be enforced. Typecasting is enforced on all types except 'any'. If a value cannot be typecasted to the correct type, the original value will remain untouched.\n\nTypes can be extended with a variety of attributes. Some attributes are type-specific and some apply to all types.\n\nCustom types can be created by defining an object with type properties.\n```js\nvar NotEmptyString = {type: String, minLength: 1};\ncountry: {type: NotEmptyString, default: 'USA'}\n```\n\n##General attributes\n\n###transform\nCalled immediately when value is set and before any typecast is done.\n```js\nname: {type: String, transform: function(value) {\n  // Modify the value here...\n  return value;\n}}\n```\n\n###default\nProvide default value. You may pass value directly or pass a function which will be executed when the value is retrieved. The function is executed in the context of the object and can use \"this\" to access other properties.\n```js\ncountry: {type: String, default: 'USA'}\n```\n\n###readOnly\nIf true, the value can be read but cannot be written to. This can be useful for creating fields that reflect other values.\n```js\nfullName: {type: String, readOnly: true, default: function(value) {\n  return (this.firstName + ' ' + this.lastName).trim();\n}}\n```\n\n###invisible\nIf true, the value can be written to but isn't outputted as an index when toObject() is called. This can be useful for creating aliases that redirect to other indexes but aren't actually present on the object.\n```js\nzip: String,\npostalCode: {type: 'alias', invisible: true, index: 'zip'}\n// this.postalCode = 12345 -> this.toObject() -> {zip: '12345'}\n```\n\n\n##String\n\n###stringTransform\nCalled after value is typecast to string **if** value was successfully typecast but called before all validation.\n```js\npostalCode: {type: String, stringTransform: function(string) {\n  // Type will ALWAYS be String, so using string prototype is OK.\n  return string.toUpperCase();\n}}\n```\n\n###regex\nValidates string against Regular Expression. If string doesn't match, it's rejected.\n```js\nmemberCode: {type: String, regex: new RegExp('^([0-9A-Z]{4})$')}\n```\n\n###enum\nValidates string against array of strings. If not present, it's rejected.\n```js\ngender: {type: String, enum: ['m', 'f']}\n```\n\n###minLength\nEnforces minimum string length.\n```js\nnotEmpty: {type: String, minLength: 1}\n```\n\n###maxLength\nEnforces maximum string length.\n```js\nstateAbbrev: {type: String, maxLength: 2}\n```\n\n###clip\nIf true, clips string to maximum string length instead of rejecting string.\n```js\nbio: {type: String, maxLength: 255, clip: true}\n```\n\n\n##Number\n\n###min\nNumber must be > min attribute or it's rejected.\n```js\npositive: {type: Number, min: 0}\n```\n\n###max\nNumber must be < max attribute or it's rejected.\n```js\nnegative: {type: Number, max: 0}\n```\n\n\n##Array\n\n###unique\nEnsures duplicate-free array, using === to test object equality.\n```js\nemails: {type: Array, unique: true, arrayType: String}\n```\n\n###arrayType\nElements within the array will be typed to the attributes defined.\n```js\naliases: {type: Array, arrayType: {type: String, minLength: 1}}\n```\n\nAn alternative shorthand version is also available -- wrap the properties within array brackets.\n```js\naliases: [{type: String, minLength: 1}]\n```\n\n\n##Object\n###objectType\nAllows you to define a typed object.\n```js\ncompany: {type: Object, objectType: {\n  name: String\n}}\n```\n\nAn alternative shorthand version is also available -- simply pass an instance of SchemaObject or a schema.\n```js\ncompany: {\n  name: String\n}\n```\n\n\n##Alias\n\n###index (required)\nThe index key of the property being aliased.\n```js\nzip: String,\npostalCode: {type: 'alias', alias: 'zip'}\n// this.postalCode = 12345 -> this.toObject() -> {zip: '12345'}\n```\n",
  "bugs": {
    "url": "https://github.com/scotthovestadt/node-schema-object/issues"
  },
  "_id": "node-schema-object@0.9.2",
  "dist": {
    "shasum": "e711432d3725fac860914504e498cf81eb43bb20"
  },
  "_from": "node-schema-object@",
  "_resolved": "https://registry.npmjs.org/node-schema-object/-/node-schema-object-0.9.2.tgz"
}
